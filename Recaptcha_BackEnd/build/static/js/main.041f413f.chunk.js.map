{"version":3,"sources":["Almacenamiento/Usuarios.js","InputField.js","ActionButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","IsLoggedIn","UserName","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","ActionButton","disabled","onClick","text","LoginForm","recaptchaloaded","bind","verifyCallback","state","username","password","isVerified","buttonDisabled","property","val","trim","lenght","setState","console","log","recaptchaToken","fetch","method","headers","body","JSON","stringify","verified","res","json","result","success","Usuarios","resetForm","alert","msg","setInputValue","sitekey","render","onloadCallback","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.041f413f.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n/**Almacenamiento de Usuarios */\r\n\r\nclass Usuario{\r\n    constructor(){\r\n        extendObservable(this, {\r\n            loading: true,\r\n            IsLoggedIn: false,\r\n            UserName: ''\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport default new Usuario();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n  render(){ \r\n    return (\r\n      <div className=\"inputField\">\r\n        <input\r\n          className='input'\r\n          type={this.props.type}\r\n          placeholder={this.props.placeholder}\r\n          value={this.props.value}\r\n          onChange={(e)=>this.props.onChange(e.target.value)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;","import React from 'react';\r\n\r\nclass ActionButton extends React.Component {\r\n  render(){ \r\n    return (\r\n      <div className=\"actionButton\">\r\n        <button \r\n          className='btn'\r\n          disabled={this.props.disabled}\r\n          onClick={() => this.props.onClick()}\r\n        >\r\n          {this.props.text}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ActionButton;","import React        from 'react';\r\nimport InputField   from './InputField';\r\nimport ActionButon  from './ActionButton';\r\nimport Usuarios     from './Almacenamiento/Usuarios';\r\nimport Recaptcha    from 'react-recaptcha';\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n      this.recaptchaloaded = this.recaptchaloaded.bind(this);\r\n      this.verifyCallback = this.verifyCallback.bind(this);\r\n      this.state = {\r\n      username: '',\r\n      password: '',\r\n      isVerified: false,\r\n      buttonDisabled: false\r\n    }\r\n  }\r\n\r\n  setInputValue(property, val){\r\n    val = val.trim();\r\n    if (val.lenght >12) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      [property]: val\r\n    })\r\n  }\r\n\r\n  resetForm(){\r\n    this.setState({\r\n      username: '',\r\n      password: '',\r\n      isVerified: false,\r\n      buttonDisabled: false\r\n    })\r\n  }\r\n\r\n  recaptchaloaded(){\r\n    console.log(\"Se ha insertado el recaptcha\");\r\n  }\r\n\r\n  //Token generado por el recaptcha\r\n  verifyCallback(recaptchaToken){\r\n    this.setState({\r\n      isVerified: recaptchaToken\r\n    })\r\n    //console.log(this.state.isVerified) \r\n  }\r\n  \r\n  async doLogin(){\r\n    /*if (!this.state.username) {\r\n      return;\r\n    }\r\n    if (!this.state.password) {\r\n      return;\r\n    }\r\n    */\r\n   //console.log(this.state.isVerified);\r\n    this.setState({\r\n      buttonDisabled:true\r\n    })\r\n\r\n    try {\r\n      let res = await fetch('/login', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          username: this.state.username,\r\n          password: this.state.password,\r\n          verified: this.state.isVerified,\r\n        })\r\n      });  \r\n\r\n      let result = await res.json();\r\n      if (result && result.success) {\r\n        Usuarios.IsLoggedIn = true;\r\n        Usuarios.username = result.username;\r\n      }\r\n      else if (result && result.success === false) {\r\n        this.resetForm();\r\n        alert(result.msg);\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.resetForm();\r\n    }\r\n  }\r\n\r\n  render(){ \r\n    return (\r\n      <div className=\"loginForm\">\r\n        <h3> Bienvenido </h3>\r\n\r\n        <InputField\r\n          type='text'\r\n          placeholder='Username'\r\n          value={this.state.username ? this.state.username : ''}\r\n          onChange= {(val) => this.setInputValue('username',val)}\r\n        />\r\n        <InputField\r\n          type='password'\r\n          placeholder='Password'\r\n          value={this.state.password ? this.state.password : ''}\r\n          onChange= {(val) => this.setInputValue('password',val)}\r\n        />\r\n        \r\n        <Recaptcha\r\n        sitekey=\"6LeI6ewUAAAAAD7705euj7dv5CMPN9VRE7pORTpe\"\r\n        render=\"explicit\"\r\n        onloadCallback={this.recaptchaloaded}\r\n        verifyCallback={this.verifyCallback}\r\n      />\r\n        <ActionButon\r\n          text = 'Entrar'\r\n          disabled = {this.state.buttonDisabled}\r\n          onClick = {() => this.doLogin()}\r\n        />\r\n\r\n        \r\n\r\n      \r\n      </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React        from 'react';\r\nimport {observer}   from 'mobx-react';\r\nimport Recaptcha    from 'react-recaptcha';\r\nimport Usuarios     from './Almacenamiento/Usuarios';\r\nimport LoginForm    from './LoginForm';\r\nimport ActionButton from './ActionButton';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  async componentDidMount(){\r\n    try {\r\n      let res = await fetch('/IsLoggedIn', {\r\n          method: 'post',\r\n          headers:{\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n          }\r\n      });\r\n\r\n      let result = await res.json();\r\n\r\n      if (result && result.success){\r\n        Usuarios.loading = false;\r\n        Usuarios.IsLoggedIn = true;\r\n        Usuarios.UserName = result.UserName;\r\n      }\r\n      else{\r\n        Usuarios.loading = false;\r\n        Usuarios.IsLoggedIn = false;\r\n      }\r\n      \r\n    } catch (e) {\r\n        Usuarios.loading = false;\r\n        Usuarios.IsLoggedIn = false;\r\n    }\r\n  }\r\n\r\n\r\n  async doLogout(){\r\n    try {\r\n      let res = await fetch('/logout', {\r\n          method: 'post',\r\n          headers:{\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n          }\r\n      });\r\n\r\n      let result = await res.json();\r\n\r\n      if (result && result.success){\r\n        Usuarios.IsLoggedIn = false;\r\n        Usuarios.UserName = '';\r\n      }\r\n      \r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n  }\r\n\r\n\r\n  render(){ \r\n    if(Usuarios.loading){\r\n      return (\r\n        <div className=\"app\">\r\n          <div className=\"container\">\r\n            Cargando, Por favor espere...\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else{\r\n      if (Usuarios.IsLoggedIn) {\r\n        return (\r\n          <div className=\"app\">\r\n            <div className=\"container\">\r\n              Bienvenido {Usuarios.UserName}\r\n\r\n              <ActionButton\r\n                  text = {'Cerrar Sesion'}\r\n                  disabled = {false}\r\n                  onClick={()=>this.doLogout()}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div className=\"app\">\r\n          <div className=\"container\">\r\n            <LoginForm/>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default observer(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}